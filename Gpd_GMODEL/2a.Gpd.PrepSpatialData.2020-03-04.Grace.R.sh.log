The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) StdEnv
> ###############################################
> #R Script: Note that this is also tested locally as "~/Dropbox/Caccone_Aksoy/Glossina-spatial/Gpd-RF-Genetic-Model/2a.Gpd.PrepSpatialData.2020-03-04.Rmd"
> ###############################################
> #first thing you do is load the library that is for this analysis
> library("raster")
Loading required package: sp
> library("rgdal")
rgdal: version: 1.4-7, (SVN revision 845)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 3.0.1, released 2019/06/28
 Path to GDAL shared files: 
 GDAL binary built with GEOS: TRUE 
 Loaded PROJ.4 runtime: Rel. 6.1.1, July 1st, 2019, [PJ_VERSION: 611]
 Path to PROJ.4 shared files: /gpfs/loomis/project/caccone/nps25/conda_envs/parallel_r/share/proj
 Linking to sp version: 1.3-1 
> library("dismo")
> library("XML")
> library("maps")
> library("sp")
> library("spatstat")
Loading required package: spatstat.data
Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:raster’:

    getData

Loading required package: rpart

spatstat 1.63-3       (nickname: ‘Wet paint’) 
For an introduction to spatstat, type ‘beginner’ 


Attaching package: ‘spatstat’

The following object is masked from ‘package:dismo’:

    domain

The following objects are masked from ‘package:raster’:

    area, rotate, shift

> library("maptools")
Checking rgeos availability: FALSE
 	Note: when rgeos is not available, polygon geometry 	computations in maptools depend on gpclib,
 	which has a restricted licence. It is disabled by default;
 	to enable gpclib, type gpclibPermit()
> library("randomForest")
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library("gdistance")
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:spatstat’:

    diameter, edges, is.connected, vertices

The following object is masked from ‘package:raster’:

    union

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: Matrix

Attaching package: ‘gdistance’

The following object is masked from ‘package:igraph’:

    normalize

> library("dplyr")

Attaching package: ‘dplyr’

The following objects are masked from ‘package:igraph’:

    as_data_frame, groups, union

The following object is masked from ‘package:randomForest’:

    combine

The following object is masked from ‘package:nlme’:

    collapse

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library("foreach")
> library("doParallel")
Loading required package: iterators
Loading required package: parallel
> library("doMC")
> 
> #set working directory
> setwd("~/project/Gpd_GMODEL")
> 
> #set coordinate system for mapping
> crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") 
> 
> ###############################################>
> #Create raster stack 
> ###############################################>
> #Load a stack of raster layers
> rast_stack <- stack("/home/nps25/project/RASTERS/KenyaClips/chelsa_merit_vars_kenya.tif") 
> names(rast_stack) <- c(paste0("BIO",c(8:11),"S"),paste0("BIO",c(16:19),"S"),paste0("BIO",c(1:19)),"slope","altitude")
> 
> #isolate each raster layer
> ###############################################>
> raster01I = subset(rast_stack, 1)
> raster02I = subset(rast_stack, 2)
> raster03I = subset(rast_stack, 3)
> raster04I = subset(rast_stack, 4)
> raster05I = subset(rast_stack, 5)
> raster06I = subset(rast_stack, 6)
> raster07I = subset(rast_stack, 7)
> raster08I = subset(rast_stack, 8)
> raster09I = subset(rast_stack, 9)
> raster10I = subset(rast_stack, 10)
> raster11I = subset(rast_stack, 11)
> raster12I = subset(rast_stack, 12)
> raster13I = subset(rast_stack, 13)
> raster14I = subset(rast_stack, 14)
> raster15I = subset(rast_stack, 15)
> raster16I = subset(rast_stack, 16)
> raster17I = subset(rast_stack, 17)
> raster18I = subset(rast_stack, 18)
> raster19I = subset(rast_stack, 19)
> raster20I = subset(rast_stack, 20)
> raster21I = subset(rast_stack, 21)
> raster22I = subset(rast_stack, 22)
> raster23I = subset(rast_stack, 23)
> raster24I = subset(rast_stack, 24)
> raster25I = subset(rast_stack, 25)
> raster26I = subset(rast_stack, 26)
> raster27I = subset(rast_stack, 27)
> raster28I = subset(rast_stack, 28)
> raster29I = subset(rast_stack, 29)
> raster30I = (raster29I*0)+1 #all pixels are 1
> 
> #The "I" times 1 puts the raster in active memory
> ###############################################>
> raster01 <- raster01I*1
> raster02 <- raster02I*1
> raster03 <- raster03I*1
> raster04 <- raster04I*1
> raster05 <- raster05I*1
> raster06 <- raster06I*1
> raster07 <- raster07I*1
> raster08 <- raster08I*1
> raster09 <- raster09I*1
> raster10 <- raster10I*1
> raster11 <- raster11I*1
> raster12 <- raster12I*1
> raster13 <- raster13I*1
> raster14 <- raster14I*1
> raster15 <- raster15I*1
> raster16 <- raster16I*1
> raster17 <- raster17I*1
> raster18 <- raster18I*1
> raster19 <- raster19I*1
> raster20 <- raster20I*1
> raster21 <- raster21I*1
> raster22 <- raster22I*1
> raster23 <- raster23I*1
> raster24 <- raster24I*1
> raster25 <- raster25I*1
> raster26 <- raster26I*1
> raster27 <- raster27I*1
> raster28 <- raster28I*1
> raster29 <- raster29I*1
> raster30 <- raster30I*1
> 
> #make sure the projection is correct for each:
> ###############################################>
> proj4string(raster01) <- crs.geo
> proj4string(raster02) <- crs.geo
> proj4string(raster03) <- crs.geo
> proj4string(raster04) <- crs.geo
> proj4string(raster05) <- crs.geo
> proj4string(raster06) <- crs.geo
> proj4string(raster07) <- crs.geo
> proj4string(raster08) <- crs.geo
> proj4string(raster09) <- crs.geo
> proj4string(raster10) <- crs.geo
> proj4string(raster11) <- crs.geo
> proj4string(raster12) <- crs.geo
> proj4string(raster13) <- crs.geo
> proj4string(raster14) <- crs.geo
> proj4string(raster15) <- crs.geo
> proj4string(raster16) <- crs.geo
> proj4string(raster17) <- crs.geo
> proj4string(raster18) <- crs.geo
> proj4string(raster19) <- crs.geo
> proj4string(raster20) <- crs.geo
> proj4string(raster21) <- crs.geo
> proj4string(raster22) <- crs.geo
> proj4string(raster23) <- crs.geo
> proj4string(raster24) <- crs.geo
> proj4string(raster25) <- crs.geo
> proj4string(raster26) <- crs.geo
> proj4string(raster27) <- crs.geo
> proj4string(raster28) <- crs.geo
> proj4string(raster29) <- crs.geo
> proj4string(raster30) <- crs.geo
> 
> ###############################################>
> env=stack(raster01,
+           raster02,
+           raster03,
+           raster04,
+           raster05,
+           raster06,
+           raster07,
+           raster08,
+           raster09,
+           raster10,
+           raster11,
+           raster12,
+           raster13,
+           raster14,
+           raster15,
+           raster16,
+           raster17,
+           raster18,
+           raster19,
+           raster20,
+           raster21,
+           raster22,
+           raster23,
+           raster24,
+           raster25,
+           raster26,
+           raster27,
+           raster28,
+           raster29)
> pixels <- raster30
> ###############################################>
> 
> ##BIO1-BIO19 are the bioclim variables. If it has an "S" at the end, it is the seasonal (rather than quarterly) adaptation of the corresponding bioclim variable.
> names(env) [1] <-   "Bio08S_temp_mean_wettestS"
> names(env) [2] <-   "Bio09S_temp_mean_driestS"  
> names(env) [3] <-   "Bio10S_temp_mean_warmestS"
> names(env) [4] <-   "Bio11S_temp_mean_coldestS"
> names(env) [5] <-   "Bio16S_precip_wettestS"
> names(env) [6] <-   "Bio17S_precip_driestS"
> names(env) [7] <-   "Bio18S_precip_warmestS"
> names(env) [8] <-   "Bio19S_precip_coldestS"
> names(env) [9]  <-  "Bio01_temp_mean_annual"
> names(env) [10]  <- "Bio02_temp_mean_diurnal_range"
> names(env) [11]  <- "Bio03_isothermality"
> names(env) [12]  <- "Bio04_temp_seasonality"
> names(env) [13]  <- "Bio05_temp_max_warmestMo"
> names(env) [14]  <- "Bio06_temp_min_coldestMo"
> names(env) [15]  <- "Bio07_temp_annual_range"
> names(env) [16]  <- "Bio08_temp_mean_wettestQ"
> names(env) [17]  <- "Bio09_temp_mean_driestQ"  
> names(env) [18]  <- "Bio10_temp_mean_warmestQ"
> names(env) [19]  <- "Bio11_temp_mean_coldestQ"
> names(env) [20]  <- "Bio12_precip_annual"
> names(env) [21]  <- "Bio13_precip_wettestMo"
> names(env) [22]  <- "Bio14_precip_driestMo"
> names(env) [23]  <- "Bio15_precip_seasonality"
> names(env) [24]  <- "Bio16_precip_wettestQ"
> names(env) [25]  <- "Bio17_precip_driestQ"
> names(env) [26]  <- "Bio18_precip_warmestQ"
> names(env) [27]  <- "Bio19_precip_coldestQ"
> names(env) [28]  <- "slope"
> names(env) [29]  <- "altitude"
> names(pixels) <- "pixels"
> 
> #NOTE: If you add future, the names of the rasters in the stack have to be the same as the current ones used in building the model.
> #NOTE: current temperature rasters are in ˚K*10. future temperature rasters are in ˚C*10... so the conversion from future to current for temperature is current=raster01F/10)+273.15)*10.
> ###############################################>
> 
> # clean up objects
> x <- c("raster01I")
> x <- c(x, "raster02I")
> x <- c(x, "raster03I")
> x <- c(x, "raster04I")
> x <- c(x, "raster05I")
> x <- c(x, "raster06I")
> x <- c(x, "raster07I")
> x <- c(x, "raster08I")
> x <- c(x, "raster09I")
> x <- c(x, "raster10I")
> x <- c(x, "raster11I")
> x <- c(x, "raster12I")
> x <- c(x, "raster13I")
> x <- c(x, "raster14I")
> x <- c(x, "raster15I")
> x <- c(x, "raster16I")
> x <- c(x, "raster17I")
> x <- c(x, "raster18I")
> x <- c(x, "raster19I")
> x <- c(x, "raster20I")
> x <- c(x, "raster21I")
> x <- c(x, "raster22I")
> x <- c(x, "raster23I")
> x <- c(x, "raster24I")
> x <- c(x, "raster25I")
> x <- c(x, "raster26I")
> x <- c(x, "raster27I")
> x <- c(x, "raster28I")
> x <- c(x, "raster29I")
> x <- c(x, "raster30I")
> x <- c(x, "raster01")
> x <- c(x, "raster02")
> x <- c(x, "raster03")
> x <- c(x, "raster04")
> x <- c(x, "raster05")
> x <- c(x, "raster06")
> x <- c(x, "raster07")
> x <- c(x, "raster08")
> x <- c(x, "raster09")
> x <- c(x, "raster10")
> x <- c(x, "raster11")
> x <- c(x, "raster12")
> x <- c(x, "raster13")
> x <- c(x, "raster14")
> x <- c(x, "raster15")
> x <- c(x, "raster16")
> x <- c(x, "raster17")
> x <- c(x, "raster18")
> x <- c(x, "raster19")
> x <- c(x, "raster20")
> x <- c(x, "raster21")
> x <- c(x, "raster22")
> x <- c(x, "raster23")
> x <- c(x, "raster24")
> x <- c(x, "raster25")
> x <- c(x, "raster26")
> x <- c(x, "raster27")
> x <- c(x, "raster28")
> x <- c(x, "raster29")
> x <- c(x, "raster30")
> rm(list=x)
> 
> # map a few variables
> ###############################################>
> plot(env$Bio19S_precip_coldestS,axes=FALSE, box=FALSE)
> map(,ylim=c(-4.8, 5),xlim=c(33.7, 42.5),add=T)
> plot(pixels,axes=FALSE, box=FALSE)
> map(,ylim=c(-4.8, 5),xlim=c(33.7, 42.5),add=T)
> 
> ###############################################>
> # individual pairwise data
> ###############################################>
> # load individual pairwise data and calculate spatial lines
> G.table.all <- read.table(file="Gpd_KenTza_11loci_659indv_indiv_pairwise.txt",header=T)
> G.table <- data.frame(G.table.all[G.table.all$Ind1_siteID!=G.table.all$Ind2_siteID & G.table.all$Ind1_cluster==G.table.all$Ind2_cluster,])
> unique.G.table <- unique.data.frame(G.table.all[G.table.all$Ind1_siteID!=G.table.all$Ind2_siteID & G.table.all$Ind1_cluster==G.table.all$Ind2_cluster,c("Ind1_pixelLong","Ind1_pixelLat","Ind2_pixelLong","Ind2_pixelLat")])
> 
> ###############################################>
> begin.table <- unique.G.table[,c("Ind1_pixelLong","Ind1_pixelLat")]
> begin.coord <- begin.table
> begin.Sp.points <- SpatialPoints(begin.coord)
> 
> end.table <- unique.G.table[,c("Ind2_pixelLong","Ind2_pixelLat")]
> end.coord <- end.table
> end.Sp.points <- SpatialPoints(end.coord)
> ###############################################>
> l <- psp(begin.table[,1], begin.table[,2], end.table[,1], end.table[,2], owin(range(c(begin.table[,1], end.table[,1])), range(c(begin.table[,2], end.table[,2]))))
> spatial.l <- as(l, "SpatialLines")
> proj4string(spatial.l) <- crs.geo  # define projection system of our data
> 
> # Plot unique lines as SpatialLines
> ###############################################>
> plot(env$Bio19S_precip_coldestS,axes=FALSE, box=FALSE)
> map(,ylim=c(-4.8, 5),xlim=c(33.7, 42.5),add=T)
> plot(spatial.l,add=T)
> 
> # Calculate mean of unique lines for each variable
> registerDoMC(cores=detectCores()) #get parallelization set up
> StraightMean <- raster::extract(env, spatial.l, fun=mean, na.rm=TRUE)
> summary(StraightMean)
 Bio08S_temp_mean_wettestS Bio09S_temp_mean_driestS Bio10S_temp_mean_warmestS
 Min.   :2929              Min.   :2912             Min.   :2921             
 1st Qu.:2942              1st Qu.:2935             1st Qu.:2939             
 Median :2949              Median :2945             Median :2947             
 Mean   :2965              Mean   :2952             Mean   :2963             
 3rd Qu.:2996              3rd Qu.:2969             3rd Qu.:2993             
 Max.   :3011              Max.   :2992             Max.   :3011             
 Bio11S_temp_mean_coldestS Bio16S_precip_wettestS Bio17S_precip_driestS
 Min.   :2924              Min.   : 13.30         Min.   : 19.65       
 1st Qu.:2941              1st Qu.: 37.52         1st Qu.: 30.97       
 Median :2949              Median :101.41         Median : 41.33       
 Mean   :2962              Mean   : 81.95         Mean   : 48.52       
 3rd Qu.:2990              3rd Qu.:122.19         3rd Qu.: 57.68       
 Max.   :3006              Max.   :149.84         Max.   :125.23       
 Bio18S_precip_warmestS Bio19S_precip_coldestS Bio01_temp_mean_annual
 Min.   : 49.84         Min.   :18.39          Min.   :2918          
 1st Qu.: 64.92         1st Qu.:38.00          1st Qu.:2938          
 Median :111.21         Median :68.16          Median :2947          
 Mean   :109.91         Mean   :58.80          Mean   :2959          
 3rd Qu.:148.02         3rd Qu.:78.49          3rd Qu.:2983          
 Max.   :181.73         Max.   :89.53          Max.   :3003          
 Bio02_temp_mean_diurnal_range Bio03_isothermality Bio04_temp_seasonality
 Min.   : 38.27                Min.   :53.32       Min.   : 521.2        
 1st Qu.: 75.78                1st Qu.:62.88       1st Qu.: 788.6        
 Median : 92.18                Median :72.77       Median : 916.1        
 Mean   : 86.41                Mean   :69.71       Mean   : 969.3        
 3rd Qu.: 98.90                3rd Qu.:76.06       3rd Qu.:1157.8        
 Max.   :104.15                Max.   :78.92       Max.   :1563.1        
 Bio05_temp_max_warmestMo Bio06_temp_min_coldestMo Bio07_temp_annual_range
 Min.   :2994             Min.   :2853             Min.   : 70.87         
 1st Qu.:3009             1st Qu.:2877             1st Qu.:116.30         
 Median :3014             Median :2891             Median :126.73         
 Mean   :3024             Mean   :2900             Mean   :123.17         
 3rd Qu.:3042             3rd Qu.:2923             3rd Qu.:134.02         
 Max.   :3063             Max.   :2968             Max.   :146.74         
 Bio08_temp_mean_wettestQ Bio09_temp_mean_driestQ Bio10_temp_mean_warmestQ
 Min.   :2920             Min.   :2910            Min.   :2930            
 1st Qu.:2937             1st Qu.:2936            1st Qu.:2948            
 Median :2945             Median :2946            Median :2956            
 Mean   :2960             Mean   :2954            Mean   :2970            
 3rd Qu.:2988             3rd Qu.:2970            3rd Qu.:2998            
 Max.   :3009             Max.   :3010            Max.   :3015            
 Bio11_temp_mean_coldestQ Bio12_precip_annual Bio13_precip_wettestMo
 Min.   :2907             Min.   : 382.7      Min.   :128.8         
 1st Qu.:2930             1st Qu.: 568.1      1st Qu.:169.3         
 Median :2940             Median : 891.8      Median :225.4         
 Mean   :2948             Mean   : 878.6      Mean   :230.0         
 3rd Qu.:2964             3rd Qu.:1116.4      3rd Qu.:285.4         
 Max.   :2989             Max.   :1525.0      Max.   :366.6         
 Bio14_precip_driestMo Bio15_precip_seasonality Bio16_precip_wettestQ
 Min.   : 0.3393       Min.   : 53.70           Min.   :212.5        
 1st Qu.: 2.2107       1st Qu.: 90.16           1st Qu.:302.5        
 Median : 4.2989       Median : 95.81           Median :465.8        
 Mean   : 7.5133       Mean   : 96.23           Mean   :430.8        
 3rd Qu.: 9.7438       3rd Qu.:104.96           3rd Qu.:532.9        
 Max.   :34.2870       Max.   :131.08           Max.   :616.7        
 Bio17_precip_driestQ Bio18_precip_warmestQ Bio19_precip_coldestQ
 Min.   : 10.39       Min.   : 72.05        Min.   : 21.17       
 1st Qu.: 26.69       1st Qu.:138.67        1st Qu.: 67.59       
 Median : 41.05       Median :173.47        Median :158.11       
 Mean   : 57.71       Mean   :185.14        Mean   :174.65       
 3rd Qu.: 77.15       3rd Qu.:224.77        3rd Qu.:271.47       
 Max.   :191.58       Max.   :318.73        Max.   :414.52       
     slope           altitude      
 Min.   :0.1376   Min.   :  13.35  
 1st Qu.:1.1026   1st Qu.: 440.87  
 Median :1.9037   Median :1333.67  
 Mean   :1.9751   Mean   :1046.44  
 3rd Qu.:2.5410   3rd Qu.:1527.79  
 Max.   :6.3764   Max.   :1911.43  
> gc()
           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells  3407026 182.0    6561261 350.5  6561261 350.5
Vcells 48286856 368.4   93632104 714.4 88770528 677.3
> 
> # calculate sum of pixels along straight lines
> ###############################################>
> StraightSumPixels <- raster::extract(pixels, spatial.l, fun=sum, na.rm=TRUE)
> summary(StraightSumPixels) 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    2.0   138.5   246.0   252.1   360.0   707.0 
> 
> # create a final data table
> ###############################################>
> StriaghtLinesTable <- cbind(unique.G.table,as.data.frame(StraightMean),as.data.frame(StraightSumPixels))
> StraightLinesDF <- left_join(G.table,StriaghtLinesTable)
Joining, by = c("Ind1_pixelLong", "Ind1_pixelLat", "Ind2_pixelLong", "Ind2_pixelLat")
> 
> save.image(file="2a.Gpd.PrepSpatialData.2020-03-04.Grace.RData")
> 
