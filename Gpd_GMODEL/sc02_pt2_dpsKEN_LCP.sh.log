The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) StdEnv

Attaching package: ‘dplyr’

The following objects are masked from ‘package:igraph’:

    as_data_frame, groups, union

The following object is masked from ‘package:randomForest’:

    combine

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following object is masked from ‘package:nlme’:

    collapse

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> load("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeoRF_pt1.RData")
> #Import foldnum for 10-fold cross validation
> 
> foldnum<-Sys.getenv(c('foldnum'))
> print(foldnum)
[1] "2"
> 
> #Import packages
> library("sp")
> library("spatstat")
Loading required package: spatstat.data
Loading required package: nlme
Loading required package: rpart

spatstat 1.63-3       (nickname: ‘Wet paint’) 
For an introduction to spatstat, type ‘beginner’ 

> library("maptools")
> #Import foldnum for 10-fold cross validation
> 
> foldnum<-Sys.getenv(c('foldnum'))
> print(foldnum)
[1] "3"
> 
> #Import packages
> library("sp")
Checking rgeos availability: FALSE
 	Note: when rgeos is not available, polygon geometry 	computations in maptools depend on gpclib,
 	which has a restricted licence. It is disabled by default;
 	to enable gpclib, type gpclibPermit()
> library("raster")
> 
> crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # ... add coordinate system
> library("spatstat")
Loading required package: spatstat.data
Loading required package: nlme
Loading required package: rpart

spatstat 1.63-3       (nickname: ‘Wet paint’) 
For an introduction to spatstat, type ‘beginner’ 

> library("maptools")

Attaching package: ‘raster’

The following objects are masked from ‘package:spatstat’:

    area, rotate, shift

The following object is masked from ‘package:nlme’:

    getData

> library("randomForest")
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library("gdistance")
Checking rgeos availability: FALSE
 	Note: when rgeos is not available, polygon geometry 	computations in maptools depend on gpclib,
 	which has a restricted licence. It is disabled by default;
 	to enable gpclib, type gpclibPermit()
> library("raster")
Loading required package: igraph
> 
> rmr=function(x){
+   ## function to truly delete raster and temporary files associated with them
+   if(class(x)=="RasterLayer"&grepl("^/tmp",x@file@name)&fromDisk(x)==T){
+     file.remove(x@file@name,sub("grd","gri",x@file@name))
+     rm(x)
+   }
+ }
> 
> 
> ###############################################
> #Plot lines as SpatialLines:
> ###############################################
> 
> #Plot straight lines for first iteration of RF
> 
> #need to download test
> 
> Test.table <- read.table(file=paste0("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeotestData_", foldnum, ".csv"), sep=",", header=T)

Attaching package: ‘igraph’

The following object is masked from ‘package:raster’:

    union

The following objects are masked from ‘package:spatstat’:

    diameter, edges, is.connected, vertices

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: Matrix
> #For testing;
> #Test.table <- Test.table[1:10,]
> 
> Train.table <- read.table(file=paste0("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeotrainData_", foldnum, ".csv"), sep=",", header=T)

Attaching package: ‘gdistance’

The following object is masked from ‘package:igraph’:

    normalize

> #library("SDraw")
> #library("tidyverse")
> library("foreach")
> library("doParallel")
Loading required package: iterators
Loading required package: parallel
> library("doMC")
> library("dplyr")

Attaching package: ‘dplyr’

The following objects are masked from ‘package:igraph’:

    as_data_frame, groups, union

The following object is masked from ‘package:randomForest’:

    combine

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following object is masked from ‘package:nlme’:

    collapse

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> load("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeoRF_pt1.RData")

Attaching package: ‘raster’

The following objects are masked from ‘package:spatstat’:

    area, rotate, shift

The following object is masked from ‘package:nlme’:

    getData

> library("randomForest")
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library("gdistance")
Loading required package: igraph

Attaching package: ‘igraph’

The following object is masked from ‘package:raster’:

    union

The following objects are masked from ‘package:spatstat’:

    diameter, edges, is.connected, vertices

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: Matrix
> #For testing:
> #Train.table <- Train.table[1:10,]
> 
> #START BUILDING TRAIN DF
> #begin using objects that will be overwritten
> #create group of ONLY unique train coordinate pairs (reduces number of lines)
> unique_coords <-  unique(Train.table[,c("long1","lat1","long2","lat2")])

Attaching package: ‘gdistance’

The following object is masked from ‘package:igraph’:

    normalize

> #library("SDraw")
> #library("tidyverse")
> library("foreach")
> library("doParallel")
Loading required package: iterators
Loading required package: parallel
> 
> begin.table <- unique_coords[,c("long1","lat1")]
> begin.coord <- begin.table #copy one for coords, one for df
> coordinates(begin.coord) <- c("long1", "lat1")
> library("doMC")
> 
> end.table <- unique_coords[,c("long2","lat2")]
> end.coord <- end.table #copy one for coords, one for df
> coordinates(end.coord) <- c("long2", "lat2")
> 
> registerDoMC(cores=detectCores()) 
> library("dplyr")
> 
> StraightMeanUniq <- foreach(r=1:nrow(begin.table), .combine='rbind', .packages=c('raster', 'gdistance')  ,   .inorder=TRUE   ) %dopar% {
+   p <- psp(begin.table[r,1], begin.table[r,2], end.table[r,1], end.table[r,2], owin(range(c(begin.table[,1], end.table[,1])), range(c(begin.table[,2], end.table[,2]))))
+   spatial.p <- as(p, "SpatialLines")
+   proj4string(spatial.p) <- crs.geo 
+   data.frame(raster::extract(env, spatial.p, fun=mean, na.rm=TRUE))
+ }

Attaching package: ‘dplyr’

The following objects are masked from ‘package:igraph’:

    as_data_frame, groups, union

The following object is masked from ‘package:randomForest’:

    combine

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following object is masked from ‘package:nlme’:

    collapse

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> load("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeoRF_pt1.RData")
> 
> crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # ... add coordinate system
> 
> rmr=function(x){
+   ## function to truly delete raster and temporary files associated with them
+   if(class(x)=="RasterLayer"&grepl("^/tmp",x@file@name)&fromDisk(x)==T){
+     file.remove(x@file@name,sub("grd","gri",x@file@name))
+     rm(x)
+   }
+ }
> 
> 
> ###############################################
> #Plot lines as SpatialLines:
> ###############################################
> 
> #Plot straight lines for first iteration of RF
> 
> #need to download test
> 
> Test.table <- read.table(file=paste0("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeotestData_", foldnum, ".csv"), sep=",", header=T)
> #For testing;
> #Test.table <- Test.table[1:10,]
> 
> Train.table <- read.table(file=paste0("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeotrainData_", foldnum, ".csv"), sep=",", header=T)
> 
> crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # ... add coordinate system
> 
> rmr=function(x){
+   ## function to truly delete raster and temporary files associated with them
+   if(class(x)=="RasterLayer"&grepl("^/tmp",x@file@name)&fromDisk(x)==T){
+     file.remove(x@file@name,sub("grd","gri",x@file@name))
+     rm(x)
+   }
+ }
> 
> 
> ###############################################
> #Plot lines as SpatialLines:
> ###############################################
> 
> #Plot straight lines for first iteration of RF
> 
> #need to download test
> 
> Test.table <- read.table(file=paste0("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeotestData_", foldnum, ".csv"), sep=",", header=T)
> #For testing;
> #Test.table <- Test.table[1:10,]
> 
> Train.table <- read.table(file=paste0("/home/fas/caccone/apb56/project/GPDGENCON/DPS/CV/GeotrainData_", foldnum, ".csv"), sep=",", header=T)
> #For testing:
> #Train.table <- Train.table[1:10,]
> 
> #START BUILDING TRAIN DF
> #begin using objects that will be overwritten
> #create group of ONLY unique train coordinate pairs (reduces number of lines)
> unique_coords <-  unique(Train.table[,c("long1","lat1","long2","lat2")])
> 
> begin.table <- unique_coords[,c("long1","lat1")]
> begin.coord <- begin.table #copy one for coords, one for df
> coordinates(begin.coord) <- c("long1", "lat1")
> 
> end.table <- unique_coords[,c("long2","lat2")]
> end.coord <- end.table #copy one for coords, one for df
> coordinates(end.coord) <- c("long2", "lat2")
> 
> registerDoMC(cores=detectCores()) 
> 
> StraightMeanUniq <- foreach(r=1:nrow(begin.table), .combine='rbind', .packages=c('raster', 'gdistance')  ,   .inorder=TRUE   ) %dopar% {
+   p <- psp(begin.table[r,1], begin.table[r,2], end.table[r,1], end.table[r,2], owin(range(c(begin.table[,1], end.table[,1])), range(c(begin.table[,2], end.table[,2]))))
+   spatial.p <- as(p, "SpatialLines")
+   proj4string(spatial.p) <- crs.geo 
+   data.frame(raster::extract(env, spatial.p, fun=mean, na.rm=TRUE))
+ }
> #For testing:
> #Train.table <- Train.table[1:10,]
> 
> #START BUILDING TRAIN DF
> #begin using objects that will be overwritten
> #create group of ONLY unique train coordinate pairs (reduces number of lines)
> unique_coords <-  unique(Train.table[,c("long1","lat1","long2","lat2")])
> 
> begin.table <- unique_coords[,c("long1","lat1")]
> begin.coord <- begin.table #copy one for coords, one for df
> coordinates(begin.coord) <- c("long1", "lat1")
> 
> end.table <- unique_coords[,c("long2","lat2")]
> end.coord <- end.table #copy one for coords, one for df
> coordinates(end.coord) <- c("long2", "lat2")
> 
> registerDoMC(cores=detectCores()) 
> 
> StraightMeanUniq <- foreach(r=1:nrow(begin.table), .combine='rbind', .packages=c('raster', 'gdistance')  ,   .inorder=TRUE   ) %dopar% {
+   p <- psp(begin.table[r,1], begin.table[r,2], end.table[r,1], end.table[r,2], owin(range(c(begin.table[,1], end.table[,1])), range(c(begin.table[,2], end.table[,2]))))
+   spatial.p <- as(p, "SpatialLines")
+   proj4string(spatial.p) <- crs.geo 
+   data.frame(raster::extract(env, spatial.p, fun=mean, na.rm=TRUE))
+ }
